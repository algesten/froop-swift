{"Functions.html#/s:5froop7flatten6nestedAA6StreamCyxGAEyAFG_tlF":{"name":"flatten(nested:)","abstract":"<p>Flatten a stream of streams, sequentially. This means that any new stream"},"Functions.html#/s:5froop19flattenConcurrently6nestedAA6StreamCyxGAEyAFG_tlF":{"name":"flattenConcurrently(nested:)","abstract":"<p>Flatten a stream of streams, concurrently. This means that any new stream"},"Functions.html#/s:5froop5mergeyAA6StreamCyxGAEd_tlF":{"name":"merge(_:)","abstract":"<p>Merge a bunch of streams emitting the same T to one.</p>"},"Functions.html#/s:5froop7combineyAA6StreamCyx_q_tGADyxG_ADyq_Gtr0_lF":{"name":"combine(_:_:)","abstract":"<p>Combine a number of streams and emit values when any of them emit a value.</p>"},"Functions.html#/s:5froop7combineyAA6StreamCyx_q_q0_tGADyxG_ADyq_GADyq0_Gtr1_lF":{"name":"combine(_:_:_:)","abstract":"<p>Combine a number of streams and emit values when any of them emit a value.</p>"},"Functions.html#/s:5froop7combineyAA6StreamCyx_q_q0_q1_tGADyxG_ADyq_GADyq0_GADyq1_Gtr2_lF":{"name":"combine(_:_:_:_:)","abstract":"<p>Combine a number of streams and emit values when any of them emit a value.</p>"},"Functions.html#/s:5froop7combineyAA6StreamCyx_q_q0_q1_q2_tGADyxG_ADyq_GADyq0_GADyq1_GADyq2_Gtr3_lF":{"name":"combine(_:_:_:_:_:)","abstract":"<p>Combine a number of streams and emit values when any of them emit a value.</p>"},"Classes/Imitator.html#/s:5froop8ImitatorC6streamAA6StreamCyxGyF":{"name":"stream()","abstract":"<p>Get a stream from this imitator. Can be used multiple times and each instance","parent_name":"Imitator"},"Classes/Imitator.html#/s:5froop8ImitatorC7imitate5otheryAA6StreamCyxG_tF":{"name":"imitate(other:)","abstract":"<p>Start imitating another stream. This can be called exactly once.","parent_name":"Imitator"},"Classes/Subscription.html#/s:5froop12SubscriptionC11unsubscribeyyF":{"name":"unsubscribe()","abstract":"<p>Unsubscribe from further updates.</p>","parent_name":"Subscription"},"Classes/Collector.html#/s:5froop9CollectorC4waitSayxGyF":{"name":"wait()","abstract":"<p>Stall the thread and wait for the stream this collector works off to end.</p>","parent_name":"Collector"},"Classes/Collector.html#/s:5froop9CollectorC4takeSayxGyF":{"name":"take()","abstract":"<p>Take whatever values are in the collector without waiting for","parent_name":"Collector"},"Classes/Sink.html#/s:5froop4SinkCACyxGycfc":{"name":"init()","abstract":"<p>Create a new sink.</p>","parent_name":"Sink"},"Classes/Sink.html#/s:5froop4SinkC6streamAA6StreamCyxGyF":{"name":"stream()","abstract":"<p>Get a stream from this sink. Can be used multiple times and each instance","parent_name":"Sink"},"Classes/Sink.html#/s:5froop4SinkC6updateyyxF":{"name":"update(_:)","abstract":"<p>Update a value into the sink and all connected streams.</p>","parent_name":"Sink"},"Classes/Sink.html#/s:5froop4SinkC3endyyF":{"name":"end()","abstract":"<p>End this sink. No more values can be sent after this.</p>","parent_name":"Sink"},"Classes/Stream.html#/s:5froop6StreamC9subscribeyAA12SubscriptionCyxGyxSgcF":{"name":"subscribe(_:)","abstract":"<p>Subscribe to values from this stream. Nil indicates the end of","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC7collectAA9CollectorCyxGyF":{"name":"collect()","abstract":"<p>Collect values of this stream into an array of values.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC8dedupeByyACyxGqd__xcSQRd__lF":{"name":"dedupeBy(_:)","abstract":"<p>Dedupe the stream by extracting some equatable value from it.","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC4drop6amountACyxGSu_tF":{"name":"drop(amount:)","abstract":"<p>Drop a fixed number of initial values, then start emitting.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC9dropWhileyACyxGSbxcF":{"name":"dropWhile(_:)","abstract":"<p>Drop values while some condition holds true, then start emitting.","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC7endWhen5otherACyxGACyqd__G_tlF":{"name":"endWhen(other:)","abstract":"<p>Make a stream that ends when some other stream ends.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC6filteryACyxGSbxcF":{"name":"filter(_:)","abstract":"<p>Filter the stream using some sort of test.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC4foldyAA06MemoryB0Cyqd__Gqd___qd__qd___xtctlF":{"name":"fold(_:_:)","abstract":"<p>Fold the stream by combining values from the past with the new value.","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC4lastACyxGyF":{"name":"last()","abstract":"<p>Makes a stream that only emits the last value.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC3mapyACyqd__Gqd__xclF":{"name":"map(_:)","abstract":"<p>Transform values of type T to type U.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC5mapTo5valueACyqd__Gqd___tlF":{"name":"mapTo(value:)","abstract":"<p>Transform any incoming value to one fixed value.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC8rememberAA06MemoryB0CyxGyF":{"name":"remember()","abstract":"<p>Make a stream that remembers the last value. Any new (or combinator) will get the","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC13sampleCombineyACyx_qd__tGACyqd__GlF":{"name":"sampleCombine(_:)","abstract":"<p>For every value of this stream, take a sample of the last value of some other","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC9startWith5valueAA06MemoryB0CyxGx_tF":{"name":"startWith(value:)","abstract":"<p>Prepend a value to a stream. Or in other words, give a start value to a stream.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC4take6amountACyxGSu_tF":{"name":"take(amount:)","abstract":"<p>Take a fixed amount of elements, then end.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC9takeWhileyACyxGSbxcF":{"name":"takeWhile(_:)","abstract":"<p>Take values from the stream while some condition hold true, then end the stream.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamC4waityyF":{"name":"wait()","abstract":"<p>Stall the thread until the stream to ends.</p>","parent_name":"Stream"},"Classes/Stream.html#/s:5froop6StreamCAASQRzlE6dedupeACyxGyF":{"name":"dedupe()","abstract":"<p>Dedupe the stream by the value in the stream itself</p>","parent_name":"Stream"},"Classes/Stream.html":{"name":"Stream","abstract":"<p>Stream of vaules over time. Typically created by a Sink.</p>"},"Classes.html#/s:5froop12MemoryStreamC":{"name":"MemoryStream","abstract":"<p>Specialization of Stream that has <q>memory</q>. Memory means that any"},"Classes/Sink.html":{"name":"Sink","abstract":"<p>The originator of a stream of values.</p>"},"Classes/Collector.html":{"name":"Collector","abstract":"<p>Helper to collect values from a stream. Mainly useful for tests.</p>"},"Classes/Subscription.html":{"name":"Subscription","abstract":"<p>Subscriptions are receipts to the <code>Stream.subscribe()</code> operation. They"},"Classes/Imitator.html":{"name":"Imitator","abstract":"<p>Imitators are used to create cyclic streams. The imitator is an originator"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"}}